/* Config geral*/

body,
ul,
li,
p {
  margin: 0px;
  padding: 0px;
  list-style: none;
  font-size: 1.2rem;
  font-family: Arial;
}

body {
  margin-bottom: 100px;
}

/* Cabeçalho */

a {
  text-decoration: none;
  color: white;
}

h1 {
  text-align: center;
  margin-top: 100px;
}

img {
  max-width: 100%;
  display: block;
}

.header {
  background: #1d1e20;
  display: flex;
  flex-wrap: wrap; 
  justify-content: space-between;
  align-items: center;
  padding: 20px;
}

.menu {
  display: flex;
}

.menu li {
  margin-left: 10px;
}

.menu li a {
  display: block;
  padding: 10px;
}


/* CSS FLEXBOX 1 */

.flex {
    display: flex;
    flex-wrap: wrap; /* Os elementos irão individualmente para a linha de baixo
    a medida que a tela for diminuindo */
    max-width: 800px;
    margin: 0 auto; /* Se a tela for maior que os 800px vai alinhar ao centro*/
}

.flex > div {
    flex: 1 1 200px; /* Agrupamento de propriedades equivalente a:
        flex-grow: 1; // taxa de crescimento, onde 0 não permite crescer
        flex-shrink: 1; // taxa de redução, onde 0 não permite diminuir
        flex-basis: 200px; // largura mínima da div, menos que isso quebra-se linha
    */
    margin: 10px;
}


/* CSS GRID 1 */

.grid1 {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Mesma coisa de '1fr 1fr 1fr', onde
    fr é a unidade fracional, ou seja, 3 unidades divididas igualmente*/
    max-width: 800px;
    padding: 10px;
    margin: 0 auto;
    gap: 20px; /* Espaço entre os elementos do grid (Substitui o antigo grid-gap) */
}


.grid1 > div:nth-child(n + 4) { /* Essa notação significa que a partir do quarto item
    o estilo será aplicado. Pode também receber um número específico e aplica o estilo para
    apenas aquele elemento.
    */
    display: grid; /* aplica para as divs, que contém apeas <img> e <p> */
    grid-template-columns: 1fr 1fr; /* coloca <img> e <p> lado a lado em colunas */
    gap: 10px;
    align-items: center;
}

.grid1 > div.anuncio {
    grid-column: 1; /* Posicionar na coluna 1*/
    grid-row: 2 / 5; /* Posicionar nas linhas 2, 3 e 4. OBS.: No grid a contagem se dá pelas bordas
    das células, ou seja, no caso de 4 linhas tem-se 5 bordas ao todo. Assim, a primeira célula está 
    entre as bordas 1 e 2, e as outras células estão entre a 2 e 5. */
    border-top: 10px solid tomato;
    display: block;
}


@media (max-width: 600px) {
  .grid1 {
    grid-template-columns: repeat(2, 1fr); /* de 3 colunas passa a ter apenas 2*/
  }
  .grid1 > div:nth-child(n + 4) {
    display: block; /* Ao deixar de ser display: grid as outras propriedades associadas ao
    grid também deixam de existir */
  }
  .grid1 > div.anuncio {
    grid-column: auto;
    grid-row: auto;
    order: -1; /* Coloca o anúncio como o primeiro elemento. OBS: ocorre apenas visualmente,
    o DOM não é modificado! */
  }
}


/* CSS Grid 2 */

.grid2 {
  display: grid;
  grid-template-columns: 1fr 200px; /* Primeira coluna de tamanho variável, e a segunda fixa */
  gap: 20px;
  max-width: 800px;
  padding: 10px;
  margin: 0 auto;
}

.sidebar > div {
  margin-bottom: 10px;
}

@media (max-width: 600px) {
  .grid2 {
    grid-template-columns: 1fr;
  }
  .sidebar {
    display: flex;
    overflow: scroll;
  }
  .sidebar > div {
    flex: 1 0 200px;
    margin: 0 10px;
  }
}

/* SECTION GRID 3 */

.grid3 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin: 0 auto;
    max-width: 800px;
    padding: 10px;
}

.grid3-item:nth-child(1) {
    grid-row: 1 / 3;
}

.grid3-item {
  display: grid;
}

.grid3-item img {
  grid-column: 1;
  grid-row: 1/3; /* a <img> vai contemplar todas as 2 linhas */
  align-self: end; /* para garantir que o <p> fique no final da <img>, como rodapé */
}

.grid3-item p {
  background: rgba(0, 0, 0, 0.6);
  padding: 10px;
  color: white;

  grid-column: 1;
  grid-row: 2/3; /* o <p> fica na segunda linha, fazendo intersecção com a <img> */
  align-self: end; /* para garantir que o <p> fique no final da <img>, como rodapé */
}